// Mocks generated by Mockito 5.4.2 from annotations
// in abc_jobs/test/assign_candidate_project_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:abc_jobs/company/services/performance_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PerformanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformanceService extends _i1.Mock
    implements _i2.PerformanceService {
  MockPerformanceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<dynamic>> getAllEvaluationsCompany() => (super.noSuchMethod(
        Invocation.method(
          #getAllEvaluationsCompany,
          [],
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> crearEvaluacionDesempeno({
    required int? candidateId,
    required int? projectId,
    required int? employeeId,
    required int? score,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #crearEvaluacionDesempeno,
          [],
          {
            #candidateId: candidateId,
            #projectId: projectId,
            #employeeId: employeeId,
            #score: score,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<dynamic>> getAllProjects() => (super.noSuchMethod(
        Invocation.method(
          #getAllProjects,
          [],
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);

  @override
  _i3.Future<List<dynamic>> getAllTestResults() => (super.noSuchMethod(
        Invocation.method(
          #getAllTestResults,
          [],
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> startProcess({
    required String? projectId,
    required String? candidateId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startProcess,
          [],
          {
            #projectId: projectId,
            #candidateId: candidateId,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<dynamic, dynamic>> evaluarTest({
    required int? score,
    required int? assementId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #evaluarTest,
          [],
          {
            #score: score,
            #assementId: assementId,
          },
        ),
        returnValue:
            _i3.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i3.Future<Map<dynamic, dynamic>>);

  @override
  _i3.Future<List<dynamic>> buscarCandidatoParaProyecto({
    String? skills,
    String? experience,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarCandidatoParaProyecto,
          [],
          {
            #skills: skills,
            #experience: experience,
          },
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);
}
